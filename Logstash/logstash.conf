input{
  http_poller {
    urls => {
      NameNodeInfo => {
        method => get
        url => 'http://$HOST:50070/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo'
      }
      NameNodeStatus => {
        method => get
        url => 'http://$HOST:50070/jmx?qry=Hadoop:service=NameNode,name=NameNodeStatus'
      }
      NNJvmMetrics => {
        method => get
        url => 'http://$HOST:50070/jmx?qry=Hadoop:service=NameNode,name=JvmMetrics'
      }
      FSNamesystem => {
        method => get
        url => 'http://$HOST:50070/jmx?qry=Hadoop:service=NameNode,name=FSNamesystem'
      }

      RMJvmMetrics => {
        method => get
        url => 'http://$HOST:8088/jmx?qry=Hadoop:service=ResourceManager,name=JvmMetrics'
      }
      clusterMetrics => {
        method => get
        url => 'http://$HOST:8088/ws/v1/cluster/metrics'
      }
      DNJvmMetrics => {
        method => get
        url => 'http://$HOST:50075/jmx?qry=Hadoop:service=DataNode,name=JvmMetrics'
      }
      FSDatasetState => {
        method => get
        url => 'http://$HOST:50075/jmx?qry=Hadoop:service=DataNode,name=FSDatasetState'
      }

      NodeManagerMetrics => {
        method => get
        url => 'http://$HOST:8042/jmx?qry=Hadoop:service=NodeManager,name=NodeManagerMaetircs'
      }
    }
          metadata_target => meta
          request_timeout => 60
          schedule =>  {'every'=>'3s'}
          codec => 'json'
          add_field => {'clusterId'=>'$CLUSTER_ID'}
          add_field => {'clustername'=>'$CLUSTER_NAME'}
          add_field => {'role'=>'nodemanager'}
    }
  }
filter{
  mutate{
    rename => { '@timestamp' => 'timestamp' }
    remove_field => ['[meta][response_headers]', '[meta][times_retried]', '[meta][runtime_seconds]', '[meta][response_message]', '[meta][request]']
  }
}
output{
  if [meta][code] == 200 {
    stdout{  }
    mongodb {
      id => 'hadoopmon'
      collection => '%{[meta][name]}'
      database => 'hadoopmon'
      isodate => true
      uri => 'mongodb://$DB_USER:$DB_PASS@$DB_HOST:$DB_PORT/$DB_NAME'
      codec => 'json'
    }
  }
}
